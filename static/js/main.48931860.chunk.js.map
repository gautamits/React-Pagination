{"version":3,"sources":["App.tsx","usePagination.ts","serviceWorker.ts","index.tsx"],"names":["Pagination","pageSize","setPageSize","currentPage","setCurrentPage","goLeft","goRight","pages","className","map","p","onClick","e","App","useState","facts","setFacts","pageLength","currentPageLength","activePage","visiblePages","totalItems","useEffect","useMemo","possiblePages","Math","ceil","Array","fill","i","idx","console","log","usePagination","a","async","fetch","result","json","result2","getFacts","id","en","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAwCA,IAAMA,EAAmC,SAAC,GAAuH,EAArHC,SAAqH,EAAtGC,YAAuG,IAAD,IAAlFC,mBAAkF,MAApE,EAAoE,EAAjEC,EAAiE,EAAjEA,eAAiE,KAAhDC,OAAgD,EAAjCC,QAAiC,EAAjBC,cAAiB,MAAT,GAAS,EAC/J,OACE,yBAAKC,UAAU,6BACb,wBAAIA,UAAU,SACXD,EAAME,KAAI,SAAAC,GAAC,OACV,wBAAIC,QAAS,SAAAC,GAAC,OAAER,EAAeM,IAAIF,UAAS,sBAAiBL,IAAgBO,EAAI,SAAW,KAAOA,SAO9FG,EAhDO,WAAO,IAAD,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,OCab,YAAiI,IAAD,IAAxGC,kBAAwG,MAA7F,GAA6F,MAAzFC,yBAAyF,MAAvE,GAAuE,MAApEC,kBAAoE,MAAzD,EAAyD,MAAvDC,oBAAuD,MAA1C,EAA0C,MAAvCC,kBAAuC,MAA5B,IAA4B,gGAC3GP,mBAAS,KADkG,mBACpIb,EADoI,KAC1HC,EAD0H,OAEtGY,mBAAS,GAF6F,mBAEpIX,EAFoI,KAExHC,EAFwH,KAI3IkB,qBAAU,WACNpB,EAAYe,GACZb,EAAee,KACjB,CAACD,EAAmBC,IAEtB,IAAIZ,EAAiBgB,mBAAQ,WACzB,IAAIhB,EAAe,GACnB,GAAIc,GAAcA,EAAa,EAAG,CAC9B,IAAMG,EAAgBC,KAAKC,KAAKL,EAAapB,GACzCuB,GAAiBJ,GACjBb,EAAQoB,MAAMH,GAAeI,KAAK,GAAGnB,KAAI,SAACoB,EAAGC,GAAJ,OAAWA,EAAM,KAC1DC,QAAQC,IAAI,CAACzB,WAERiB,EAAgBJ,IACrBb,EAAQoB,MAAMP,GAAcQ,KAAK,GAAGnB,KAAI,SAACoB,EAAGC,GAAJ,OAAaA,EAAM3B,MAGnE,OAAOI,IACT,CAACc,EAAYpB,EAAUmB,EAAcjB,IAUvC,MAAO,CAACF,WAAUC,cAAaC,cAAaC,iBAAgBC,OAR5D,WACOa,EAAoB,GACnBd,GAAe,SAAAD,GAAW,OAAEA,EAAY,MAMoBG,QAHpE,WACIF,GAAe,SAAAD,GAAW,OAAEA,EAAc,MAE+BI,SD3CO0B,CAAc,IAAtE9B,GAFJ,EAEnBF,SAFmB,EAETC,YAFS,EAEIC,aAAaC,EAFjB,EAEiBA,eAAiCG,GAFlD,EAEiCF,OAFjC,EAEyCC,QAFzC,EAEkDC,OAU5E,OARAe,qBAAU,YACR,qBAAAY,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,MAAM,4DAAD,OAA6DjC,KADzF,cACQkC,EADR,kBAAAH,EAAA,MAEyBG,EAAOC,QAFhC,OAEQC,EAFR,OAGEvB,EAASuB,GAHX,qCAKAC,KACA,CAACrC,IAED,yBAAKK,UAAU,OACb,wBAAIA,UAAU,SACXO,EAAMN,KAAI,WAAWqB,GAAX,IAAEW,EAAF,EAAEA,GAAIC,EAAN,EAAMA,GAAN,OAAiB,wBAAIlC,UAAU,OAAOmC,IAAKF,GACnDC,OAGL,kBAAC,EAAD,CAAYnC,MAAOA,EAAOJ,YAAaA,EAAaC,eAAgBA,MEXtDwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.48931860.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport usePagination from './usePagination';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [facts, setFacts] = useState([])\n  const {pageSize, setPageSize, currentPage, setCurrentPage, goLeft, goRight, pages } = usePagination({}) \n\n  useEffect(()=>{\n    async function getFacts(){\n      const result = await fetch(`https://programming-quotes-api.herokuapp.com/quotes/page/${currentPage}`)\n      const result2  = await result.json()\n      setFacts(result2)\n    }\n    getFacts()\n  },[currentPage])\n  return (\n    <div className=\"App\">\n      <ul className=\"facts\">\n        {facts.map(({id, en}, idx)=><li className=\"fact\" key={id}>\n          {en}\n        </li>)}\n      </ul>\n      <Pagination pages={pages} currentPage={currentPage} setCurrentPage={setCurrentPage}/>\n    </div>\n  );\n}\nfunction noop(){\n\n}\n\ninterface pagination{\n  pageSize?: number;\n  setPageSize ?: (id:number)=> void;\n  currentPage: number;\n  setCurrentPage: (id: number)=> void;\n  goLeft ?: ()=>void;\n  goRight ?: ()=>void;\n  pages : number[];\n}\nconst Pagination: React.FC<pagination> = ({ pageSize = 10, setPageSize = null, currentPage = 1, setCurrentPage , goLeft = null, goRight = null, pages = [] }) => {\n  return (\n    <div className=\"flex pagination-container\">\n      <ul className=\"pages\">\n        {pages.map(p=>\n          <li onClick={e=>setCurrentPage(p)} className={`page-number ${currentPage === p ? 'active' : ''}`}>{p}</li>\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App;\n","import React, {useState, useEffect, useCallback, useMemo} from 'react';\n\ninterface paginationProps{\n    pageSize ?: number;\n    currentPage ?: number;\n    pages?:any;\n}\n\ninterface pagination {\n    pageSize?: number;\n    setPageSize?: (id: number) => void;\n    currentPage: number;\n    setCurrentPage: (id: number) => void;\n    goLeft?: () => void;\n    goRight?: () => void;\n    pages: number[];\n}\nexport default function usePagination({pageLength=10, currentPageLength=10,activePage=1,visiblePages=5, totalItems=50000, ...rest}): pagination{\n    const [pageSize, setPageSize] = useState(10);\n    const [currentPage,setCurrentPage] = useState(1)\n    \n    useEffect(()=>{\n        setPageSize(pageLength)\n        setCurrentPage(activePage)\n    },[currentPageLength, activePage])\n\n    let pages:number[] = useMemo(()=>{\n        let pages:number[]=[]\n        if (totalItems && totalItems > 0) {\n            const possiblePages = Math.ceil(totalItems / pageSize);\n            if (possiblePages <= visiblePages) {\n                pages = Array(possiblePages).fill(0).map((i, idx) =>idx + 1)\n                console.log({pages})\n            }\n            else if (possiblePages > visiblePages) {\n                pages = Array(visiblePages).fill(0).map((i, idx) => (idx + currentPage))\n            }\n        }\n        return pages\n    },[totalItems, pageSize, visiblePages, currentPage])\n\n    function goLeft(){\n        if(currentPageLength > 1){\n            setCurrentPage(currentPage=>currentPage-1)\n        }\n    }\n    function goRight(){\n        setCurrentPage(currentPage=>currentPage + 1)\n    }\n    return {pageSize, setPageSize, currentPage, setCurrentPage, goLeft, goRight, pages}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}